#!/usr/bin/perl
# ---   *   ---   *   ---
# ATTRFIND
# Looks for attributes in
# perl subroutines
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,
# ---   *   ---   *   ---

# deps

  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/';

  use style;
  use arstd;

  use cli;
  use lang;

  use langdefs::perl;
  use peso::rd;

# ---   *   ---   *   ---
# info

  our $VERSION=v0.1.0;
  our $AUTHOR='IBN-3DILA';

# ---   *   ---   *   ---
# initialize fstruct search

my $m=cli::nit(

  @{$cli::fstruct::ATTRS},

);

my @files=cli::fstruct::proto_search($m);
my $sym_re=$m->{symbol};
my $ext_re=qr{\.pmc?}x;

# ---   *   ---   *   ---
# walk the fstruct

while(@files) {

  my $f=shift @files;

  if(-d $f) {

    arstd::expand_path($f,\@files);
    next;

  };if(!($f=~ $ext_re)) {next};

# ---   *   ---   *   ---
# parse file

  my $rd=peso::rd::new_parser(
    lang->perl,$f

  );

  my $id='-ROOT';
  my $block=$rd->select_block($id);
  $rd->hier_sort();

# ---   *   ---   *   ---
# walk each package

  my $results={};
  my $tree=$block->{tree};
  for my $pkg(@{$tree->{leaves}}) {

    # get list of subs in package
    my @subs=$pkg->branches_in(qr{^sub$}x);

    # get module name just for kicks
    my $pkgname=$pkg->{value};

    my $ar=[];

# ---   *   ---   *   ---
# report subroutine attributes

    for my $fn(@subs) {
      $id=$fn->leaf_value(0);

      if(!defined $id) {next};
      $block=$rd->select_block($id);

      if(

         length $block->{attrs}
      && ($block->{attrs}=~ $sym_re)

      ) {

        push @$ar,
          "$block->{name}".q{ }.
          "$block->{attrs}".q{ }.
          "$block->{args}".q{ }

        ;

      };

    };

# ---   *   ---   *   ---

    if(@$ar) {
      $results->{$pkgname}=$ar;

    };

  };

# ---   *   ---   *   ---

  if(keys %$results) {
    print "\e[34;22m$f\e[0m\n";

  };

  for my $pkg(keys %$results) {
    my $ar=$results->{$pkg};

    print

      "\e[37;1m<\e[0m",
      "\e[35;1m$pkg\e[0m",
      "\e[37;1m>\e[0m\n",(

      join "\n",
      map {"\e[37;1m::\e[0m$ARG"} @$ar

    ),"\n\n";

  };

};

# ---   *   ---   *   ---
1; # ret

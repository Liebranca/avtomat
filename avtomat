#!/usr/bin/perl

# ---   *   ---   *   ---
# AVTOMAT
# build helper and initializer
# generated files manager
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb
# ---   *   ---   *   ---

# deps
package avt;
  use strict;
  use warnings;

  use constant {
    VERSION => 2.0,

  };

# ---   *   ---   *   ---
# default prints

# args=author,comment prefix
# generates a notice on top of generated files
sub make_note {

  my $author=shift;
  my $ch=shift;

  my $t=`date +%Y`;
  my $note=<<"EOF"
$ch ---   *   ---   *   ---
$ch LIBRE BOILERPASTE
$ch GENERATED BY AR/AVTOMAT
$ch
$ch LICENSED UNDER GNU GPL3
$ch BE A BRO AND INHERIT
$ch
$ch COPYLEFT $author $t
$ch ---   *   ---   *   ---
EOF

;return $note;

};

# args=name,version,description,author
# generates program info
sub make_version {
  my $version=
    '* '.shift.' v'.shift."\n".
    shift."\n".
    'Copyleft '.shift.'; Licensed under GNU GPL3'."\n"
    
  ;return $version;

};

# ---   *   ---   *   ---
# path utils

# args=path
# recursively list of dirs and files in path
sub walk_dir {

  my %dirs=();my $path=glob shift;

  # dissect recursive ls
  { my @ls=split "\n\n",`ls -FBR1 $path`;
    while(@ls) {
      my @sub=split ":\n",shift @ls;
      $sub[1]=~ s/^\s+|\s+$//;
      
      my @tmp=split "\n",$sub[1];      
      $dirs{ $sub[0] }=\@tmp;

    };    

  };return (\%dirs);

};


# ---   *   ---   *   ---
# folder structure sanity checks

# ensures trsh and bin exist
sub make_dirs {

  my $root=glob shift;

  # confirmation prompt
  { print "Using $root as top directory. Continue? [Y/N] ";

    `stty -icanon -echo`;
    my $in=lc `dd bs=1 count=1 2> /dev/null`;
    
    `stty icanon echo`;print "$in\n";

    if ($in eq 'n') {
      print "Aborted by user\n";
      return;

    } elsif($in ne 'y') {
      print "Answer unclear, handler stuck in limbo\n";
      print "Aborted jic\n";
      return;

    };

  };

  chdir $root;

# ---   *   ---   *   ---

  # iter provided names
  while(@_) {
    my $mod=shift;
    print "\n>Run structure check on $mod\n";
    
    my $trsh="./trashcan/$mod";
    my $modpath="./$mod";

    # ensure there is a trashcan
    if(!(-e $trsh)) {
      #system 'mkdir',('-p',"$trsh");

    };

# ---   *   ---   *   ---

    # walk module
    

    # create any missing folders
#    for my $sub (@subdirs) {
#
#      if($sub eq '.git' || $sub eq 'docs') {next;};
#    
#      my $tsub="$trsh/$sub";
#      $sub="$modpath/$sub";
#      if(-d $sub && !(-e $tsub)) {
#        print "\e[1;34mdir\e[0m $tsub\n";
#        #mkdir $tsub;
#
#      };
#
#    };

    #`touch $trsh/mklog`;

  };

};

# ---   *   ---   *   ---
# entry point

package main;

my %h=%{ avt::walk_dir('~/AR/kvr/src/kvrnel') };
for my $key (keys %h) {
  print "+ $key:\n";
  for my $f (@{ $h{$key} }) {
    print "|--->$f\n";

  };print "\n";

};

exit;
print "\e[1;33m<AR/AVTOMAT>\e[0m ";

  if(!@ARGV) {
    print "No task provided";

  } elsif($ARGV[0] eq 'dirs') {
    shift;avt::make_dirs(@ARGV);

  };

print "\n";
print '<AR/AVTOMAT> last run by '.`echo -n \$HOSTNAME`." on ".`date`."\n\n";

# ---   *   ---   *   ---
1; # ret

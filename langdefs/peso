#!/usr/bin/perl
# ---   *   ---   *   ---
# $ syntax defs

# ---   *   ---   *   ---
#$:CUT;>

my %PESO=(

  -NAME => 'peso',
  -EXT  => '\.(pe)$',
  -HED  => '\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$',

  -MAG  => '$ program',

  -COM  => '#',

# ---   *   ---   *   ---

  -VARS =>[

    [0x04,eiths(

      '(char|wide|word|long)[0-9]*,'.
      'nihil,stark'

    ,1)],

    [0x04,eiths(

      'str,ptr,null,wed,lis'

    ,1)],

  ],

# ---   *   ---   *   ---

  -BILTN =>[

    [0x01,eiths(

      'cpy,mov,wap,'.
      'kin,sow,reap,'.

      'pop,psh,mem,fre,'.

      'exit'

    ,1)],

  ],

# ---   *   ---   *   ---

  -KEYS =>[

    # program flow
    [0x0D,eiths(

      'jmp,jif,eif,call,ret'

    ,1)],

    # directives
    [0x0D,eiths(

      'reg,rom,proc,clan,entry,atexit'

    ,1)],

  ],

# ---   *   ---   *   ---

);$PESO{-LCOM}=[
  [0x02,eaf($PESO{-COM},0,1)],

];$DICT{-PESO}=\%PESO;

# ---   *   ---   *   ---

sub peso_cntx_non {

  my $exp=shift;

};

# ---   *   ---   *   ---

my %MAM=(

  # subrd for current context
  -CNTX=>\&peso_cntx_non,

  -DST=>undef,
  -CLAN=>'def',

  # var blocks
  -REGS=>{},

  # ins blocks
  -PROCS=>{},

  # block families
  -CLANS=>{
    'def'=>{-BLOCKS=>[]}

  },

# ---   *   ---   *   ---

  -SIZES=>{

    # primitives
    'char'=>1,
    'wide'=>2,
    'word'=>4,
    'long'=>8,

    # measuring
    'unit'=>8,
    'line'=>16,

    # function types
    'nihil'=>8,
    'stark'=>8,

  },

);

# ---   *   ---   *   ---

# registers new reg block
sub peso_reg_new {

  # get reg block name
  if(my @mat=pss(

    "$_LUN*",
    undef,

    -NAME

  )) {

    # register
    my $name=$mat[0];
    $MAM{-REGS}->{$name}={};
    $MAM{-DST}=[$name,$MAM{-REGS}->{$name}];

    # set subrd func
    $MAM{-CNTX}=\&peso_reg_rd;

  };

# ---   *   ---   *   ---

# reads reg block entries
};sub peso_reg_rd {

  my $type='';
  my $name='';

  my $value=[];
  my $size=0;
  my $max_bytes=0;
  my $byte_sz=1;

# ---   *   ---   *   ---

  # get type
  if(my @mat=pss(

    $PESO{-VARS}->[0]->[1],
    undef,

    -TYPE

  )) {

    $type=$mat[0];
    $type=~ m/(\d*)/;

    # enfornce line size min of 16 bytes
    $size=($1) ? ($1+3) : $size;
    $size=($size && $size<4) ? 4 : $size;

    $max_bytes=$size**2;
    $byte_sz=$MAM{-SIZES}->{$type};

  };

# ---   *   ---   *   ---

  # get name
  if(my @mat=pss(

    "$_LUN*",
    undef,

    -NAME

  )) {$name=$mat[0];};

# ---   *   ---   *   ---

  my $v=0;
  my $cbyte=0;

  # get value(s)
  for my $x(psscsl(undef,-VALUE)) {
    $x=pehex($x);
    $v|=($x&((1<<($byte_sz*8)))-1)<<($cbyte*8);

    $cbyte+=$byte_sz;

    if($cbyte==$MAM{-SIZES}->{'unit'}) {
      push @$value,$v;$v^=$v;

    };

  };while((@$value%2) || $v) {
    push @$value,$v;$v^=$v;

  };

  printf "$name:\n";
  for(my $i=0;$i<@$value;$i+=2) {
    print sprintf
      "%016X %016X\n",
      $value->[$i+1],$value->[$i];

  };printf "\n";

# ---   *   ---   *   ---

#  $MAM{-DST}->[1]->{$name}=$value;
#
#  my $s=$MAM{-REGS}->{$MAM{-DST}->[0]}->{$name};
#
#  if($s) {
#    printf "\n>$name=$s\n";
#
#  };

};

# ---   *   ---   *   ---

# in: filename
# reads in a peso file
sub peso_rd {

  # open file
  my $fname=glob(shift);
  open FH,'<',$fname or die $!;

  # verify header
  my $rb=readline FH;
  if(!($rb=~ m/${ PESO{-HED}}/)) {
    printf STDERR "$fname: bad header\n";
    goto END;

  };

# ---   *   ---   *   ---

  # get expressions
  my @exps=();{
    my $rem='';

    # read file
    while($rb=readline FH) {

      # strip comments
      $rb=~ s/#.*\n?//;

      # force single spaces
      $rb=~ s/\s+/ /;

      # strip newlines?
      $rb=~ s/\n+//;

      if(!$rb) {next;};

# ---   *   ---   *   ---

      # line ends with ;
      if($rb=~ m/;$/) {
        $rb=$rem.$rb;$rem='';
        push @exps,(split ';',$rb);

      # multi-line expression(s)
      } else {
        my @ar=split ';',$rb;
        $rem.=pop @ar;

        if(@ar) {
          $exps[0]=$rem.$exps[0];
          push @exps,@ar;

        };
      };

# ---   *   ---   *   ---

    };

  };close FH;

# ---   *   ---   *   ---

  # iter expressions
  for my $exp(@exps) {

    if(!$exp) {next;};

    # check for context directives
    if(my @mat=pss(

      $PESO{-KEYS}->[1]->[1],
      $exp,

      -CNTX

    )) {

# ---   *   ---   *   ---

      # get match
      my $s=$mat[0];

      # run subrd func
      { 'reg'=>\&peso_reg_new,

        'proc'=>sub {;},
        'ret'=>sub {;},
        'clan'=>sub {;},

        'entry'=>sub {;},

      }->{$s}->();

# ---   *   ---   *   ---

    } else {
      $MAM{-CNTX}->();

    };clps();

  };return;

# ---   *   ---   *   ---

  # cleanup
  END:close FH;

};

# ---   *   ---   *   ---


#!/usr/bin/perl
# ---   *   ---   *   ---
# SYMFIND
# Looks for names in files
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,
# ---   *   ---   *   ---

# deps

  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/';

  use style;
  use arstd;

  use cli;
  use lang;

  use langdefs::perl;
  use peso::rd;

# ---   *   ---   *   ---
# info

  our $VERSION=v0.1.0;
  our $AUTHOR='IBN-3DILA';

# ---   *   ---   *   ---

my $m=cli::nit(

  ['recursive'],
  ['symbol','-s','--symbol',1],
  ['no_escaping','-ne','--no_escaping'],
  ['regex','-re','--regex'],

);

my @files=$m->take(@ARGV);

# ---   *   ---   *   ---

if($m->{recursive}!=NULL) {
  my @ar=@files;
  @files=();

  arstd::expand_path(\@ar,\@files);

};

if($m->{no_escaping}==NULL) {
  $m->{symbol}="\Q$m->{symbol}";

} else {
  $m->{symbol}=~ s/\$/\\\$/sg;

};

my $ext_re=qr{\.pmc?$};

my $sym_re;
if($m->{regex}==NULL) {
  $sym_re=qr{$m->{symbol}(?:\b|$|"|')};

} else {
  $sym_re=qr{$m->{symbol}};

};

# ---   *   ---   *   ---
# walk the file structure

while(@files) {

  my $f=shift @files;

  if(-d $f) {

    arstd::expand_path($f,\@files);
    next;

  } elsif(!($f=~ $ext_re)) {next};

# ---   *   ---   *   ---

  my $body=arstd::orc($f);
  $body=join "\n",

    map {$i++.':__COOKED__:'.$ARG}
    split m/\n/,$body;

  my @data=();

# ---   *   ---   *   ---

  while($body=~
    s/^(\d+:__COOKED__:(.*?)$sym_re)//m

  ) {

    my ($lineno,$code)=
      split m/:__COOKED__:/,${^CAPTURE[0]};

    $code=~ s/^\s*//;

    push @data,sprintf
      "\e[33;22m%4i\e[0m %-54s\n",
      $lineno,$code

    ;
  };

# ---   *   ---   *   ---

  if(@data) {
    printf {*STDOUT}
      "\e[34;22m%s\e[0m".
      "\e[37;1m:\e[0m\n%s\n",

      $f,join NULLSTR,@data

  };

};


# ---   *   ---   *   ---
1; # ret

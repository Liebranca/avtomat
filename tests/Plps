#!/usr/bin/perl

# tests Peso Language Pattern Syntax

# ---   *   ---   *   ---
# deps

package Plps;

  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/avtomat/sys/';

  use Style;
  use Fmat;

  use Arstd::IO;
  use Tree::Grammar;

  use parent 'St';

  use lib $ENV{'ARPATH'}.'/avtomat/';

  use Lang;
  use Lang::Peso;

  use lib $ENV{'ARPATH'}.'/avtomat/hacks/';
  use Shwl;

# ---   *   ---   *   ---
# ROM

  sub Frame_Vars($class) {return {

    # namespaces
    -clan=>{

      q[non]=>{

        rom=>{},
        reg=>{},

        proc=>{},

      },

    },

    # ptrs
    -clan_c => undef,
    -proc_c => undef,
    -reg_c  => undef,

    -anchor => [undef,undef,undef,undef],

    # default switches
    -flags  => {

      -qwor => 0,

    },

    -wtype  => undef,

  }};

  my $PENUM_RE  = qr{
    (?: \$ [0-9A-Fa-f\.:]+ )
  | (?: v[0-9]\.[0-9]{2}\.[0-9][ab]? )

  }x;

  my $PEBARE_RE = qr{
    [_A-Za-z]
    (?: [_A-Za-z0-9+] | -> | ::)+

  }x;

  my $SIGGED_RE  = $PEBARE_RE;
  my $NONTERM_RE = qr{(?: [^;] | \\; )+}x;

  my $OPS_RE     = Lang->Peso->{ops};

  my $PEARI_RE   = qr{

    (?: $PEBARE_RE|$PENUM_RE)? \s*

    (?: $OPS_RE) \s*

    (?: $PEBARE_RE|$PENUM_RE)?

  }x;

  my $PEVAL_RE   = qr{

    $PEARI_RE
  | $PENUM_RE
  | $PEBARE_RE

  | $Shwl::CUT_RE

  }x;

# ---   *   ---   *   ---

sub xt3($fr,$ckey,$st,$match) {

  my $nid  = $st->{nid};
  my @args = @{$st->{args}};

  $fr->{$ckey}=$args[0];
  $fr->{-clan}->{$fr->{-clan_c}}//={

    rom=>{},
    reg=>{},

    proc=>{},

  };

  if($ckey ne '-clan_c') {

    $fr->{-clan}

    ->{$fr->{-clan_c}}

    ->{lc $nid}
    ->{$args[0]}

    = $match;

  };

};

# ---   *   ---   *   ---

sub xt2($fr,$ckey,$st,$match,$idex) {

  my $nid  = $st->{nid};
  my @args = @{$st->{args}};

  xt3($fr,$ckey,$st,$match)
  if defined $ckey;

  $fr->{-anchor}->[3]->pushlv($match)
  if $nid ne 'CLAN';

  for my $i(@$idex) {
    $fr->{-anchor}->[$i]=$match;

  };

};

# ---   *   ---   *   ---
# :

sub xt($match,@bh) {

  my $st   = $match->bhash(@bh);
  my $fr   = Plps->get_frame();

  my $nid  = uc $st->{nid};
  my @args = @{$st->{args}};

  my $ckey = undef;
  my @idex = ();

  if($nid eq 'CLAN') {
    @idex=(0,3);
    $ckey='-clan_c';

  } elsif($nid=~ m[ROM|REG]) {
    @idex=(1,3);
    $ckey='-reg_c';

  } elsif($nid eq 'PROC') {
    @idex=(2,3);
    $ckey='-proc_c';

  };

  xt2($fr,$ckey,$st,$match,\@idex);
  return ($st,$fr->{-clan_c});

};

# ---   *   ---   *   ---
# test post-match action

sub hsort($tree,$branch,$match,$bh=[0,1]) {

  my ($st,$clan)=xt($match,@$bh);

  if($st->{nid}=~ m[REG|ROM|CLAN|PROC]) {

    $match->{value}=$st->{args}->[0];
    $match->clear_branches();

  } else {

    $match->{value}=$st->{nid};

    $match->pluck(
      $match->branch_in(qr{$st->{nid}})

    );

    for my $nd(@{$match->{leaves}}) {
      $nd->flatten_branch();

    };

  };

  return $st;

};

# ---   *   ---   *   ---
# flips switches

sub wed($tree,$branch,$match) {

  my $fr    = Plps->get_frame();

  my $st    = hsort($tree,$branch,$match);
  my $flip  = $match->{-peso_t} eq 'WED';

  my @flags = @{$st->{args}};
  my @wtype = ();

  for my $switch(@flags) {

    if(exists $fr->{-flags}->{$switch}) {
      $fr->{-flags}->{$switch}=$flip;

    } else {
      push @wtype,$switch;

    };

  };

  $fr->{-wtype}=(join q[ ],@wtype)

  if @wtype ne $NULLSTR;

  if($fr->{-flags}->{-qwor}) {
    say '-qwor set';

  } else {
    say '-qwor unset';

  };

};

# ---   *   ---   *   ---

sub pere($tree,$branch,$match) {

  my $st = hsort($tree,$branch,$match,[0,0,1]);
  my $fr = Plps->get_frame();

  $match->prich();

};

# ---   *   ---   *   ---
# make tree root

BEGIN {

  my $f    = Tree::Grammar->get_frame();

  $Top     = $f->nit(

    value  => 'peso',
    parent => undef,
    action => undef,

  );

# ---   *   ---   *   ---
# branch A: file header

  {

    my $header=$Top->init('header');

    $header->init(

      qr{\$|\%}x,
      action=>'capt',

    );

    $header->init(

      $NONTERM_RE,

      action   => 'capt',
      optional => 1,

    );

    $Term=$header->init(

      qr{(?!< \\);},
      action=>'term'

    );

  };

# ---   *   ---   *   ---
# branch B: line comment

  {

    my $comment=$Top->init('comment');

    $comment->init(
      qr{\x{23}+ [\S\x{20}]* \x{0A}}sx

    );

  };

# ---   *   ---   *   ---
# branch C: hierarchicals

  {

    my $hier = $Top->init(

      'hier',

      dom    => 'Plps',
      action => 'hsort',

    );

    my $nid  = $hier->init('nid');
    my $args = $hier->init('args');

    my $insens=join q[|],
      Lang::insens('rom'),
      Lang::insens('reg'),
      Lang::insens('clan'),
      Lang::insens('proc'),

    ;

    $nid->init(

      qr{$insens}x,
      action=>'capt',

    );


    $args->init(

      $SIGGED_RE,
      action=>'capt',

    );

    $hier->pushlv($Term->dup());

  };

# ---   *   ---   *   ---

  {

    my $pere=$Top->init(

      'pere',

      dom    => 'Plps',
      action => 'pere',

    );

    my $nid  = $pere->init('nid');
    my $name = $pere->init('name');
    my $args = $pere->init('args');

    my $pat  = Lang::insens('re');

    $nid->init(
      qr{$pat}x,
      action=>'capt',

    );

    $name->init(

      $SIGGED_RE,
      action=>'capt',

    );

    $args->init(

      $NONTERM_RE,
      action=>'capt',

    );

    $args->pushlv($Term->dup());

  };

# ---   *   ---   *   ---
# branch D: default expression

  {

    my $expr = $Top->init(

      'expr',

      dom    => 'Plps',
      action => 'hsort',

    );

    my $nid  = $expr->init('nid');
    my $args = $expr->init('args');

    $nid->init(

      $SIGGED_RE,
      action=>'capt',

    );

    my $eterm=$Term->dup();
    $eterm->{optional}=1;
    $args->pushlv($eterm);

    $args->init(

      $PEVAL_RE,
      action=>'capt',

    );

    $args->init(

      qr{(?!< \\) ,}x,

      action   => 'rew',
      optional => 1,

    );

    $args->init(

      $PEVAL_RE,

      action   => 'crew',
      optional => 1,

    );

    $args->pushlv($Term->dup());

    my $tmp = $expr->dup();
    my $wed = $expr;

    $wed->{value}  = 'switch';
    $wed->{action} = \&wed;

    my $wre=join q[|],(

      Lang::insens('wed'),
      Lang::insens('unwed'),

    );

    $wed->{leaves}->[0]
    ->{leaves}->[0]->{value}=qr{$wre}x;

    $Top->pushlv($tmp);

  };

};

# ---   *   ---   *   ---

package main;

  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/avtomat/sys/';

  use Style;
  use Fmat;

  use Arstd::IO;

# ---   *   ---   *   ---

my $prog   = orc('plps/peso.rom');
$prog      =~ m[([\S\s]+)\s*STOP]x;
$prog      = ${^CAPTURE[0]};

my $strtok = Plps::codefold(\$prog);
my $result = Plps->parse($prog);

$result->sweep(qr{comment});

for my $branch(
  $result->branches_in($Shwl::CUT_RE)

) {

  $branch->{value}=$strtok->{$branch->{value}};

};

$result->prich();

# ---   *   ---   *   ---
1; # ret

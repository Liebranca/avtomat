#!/usr/bin/perl

# tests Peso Language Pattern Syntax

# ---   *   ---   *   ---
# deps

package Plps;

  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/avtomat/sys/';

  use Style;
  use Fmat;

  use Arstd::IO;
  use Tree::Grammar;

  use lib $ENV{'ARPATH'}.'/avtomat/';

  use Lang;
  use Lang::Peso;

  use lib $ENV{'ARPATH'}.'/avtomat/hacks/';
  use Shwl;

# ---   *   ---   *   ---
# ROM

  my $PENUM_RE  = qr{
    (?: \$ [0-9A-Fa-f\.:]+ )
  | (?: v[0-9]\.[0-9]{2}\.[0-9][ab]? )

  }x;

  my $PEBARE_RE = qr{
    [_A-Za-z]
    (?: [_A-Za-z0-9+] | -> | ::)+

  }x;

  my $SIGGED_RE = $PEBARE_RE;

  my $OPS_RE    = Lang->Peso->{ops};

  my $PEARI_RE  = qr{

    (?: $PEBARE_RE|$PENUM_RE)? \s*

    (?: $OPS_RE) \s*

    (?: $PEBARE_RE|$PENUM_RE)?

  }x;

  my $PEVAL_RE  = qr{

    $PEARI_RE
  | $PENUM_RE
  | $PEBARE_RE

  | $Shwl::CUT_RE

  }x;

# ---   *   ---   *   ---
# make tree root

my $f    = Tree::Grammar->get_frame();
my $top  = $f->nit(

  value  => 'peso',
  parent => undef,
  action => undef,

);

# ---   *   ---   *   ---
# branch A: file header

my $term;

{

  my $header=$top->init('header');

  $header->init(

    qr{\$|\%}x,
    action=>'capt',

  );

  $header->init(

    qr{[^;]+},

    action   => 'capt',
    optional => 1,

  );

  $term=$header->init(

    qr{;},
    action=>'term'

  );

};

# ---   *   ---   *   ---
# branch B: line comment

{

  my $comment=$top->init('comment');

  $comment->init(
    qr{\x{23}+ [\S\x{20}]* \x{0A}}sx

  );

};

# ---   *   ---   *   ---
# test post-match action

sub hsort($tree,$branch,$match) {

  my $st=$match->bhash(0,1);

  say $st->{nid};
  say @{$st->{args}};

};

# ---   *   ---   *   ---
# branch C: hierarchicals

{

  my $hier = $top->init(

    'hier',

    dom    => 'Plps',
    action => 'hsort',

  );

  my $nid  = $hier->init('nid');
  my $args = $hier->init('args');

  my $insens=join q[|],
    Lang::insens('rom'),
    Lang::insens('reg'),
    Lang::insens('clan'),
    Lang::insens('proc'),

  ;

  $nid->init(

    qr{$insens}x,
    action=>'capt',

  );


  $args->init(

    $SIGGED_RE,
    action=>'capt',

  );

  $hier->pushlv($term->dup());

};

# ---   *   ---   *   ---
# branch D: default expression

{

  my $expr = $top->init('expr');

  my $nid  = $expr->init('nid');
  my $args = $expr->init('args');

  $nid->init(

    $SIGGED_RE,
    action=>'capt',

  );

  my $eterm=$term->dup();
  $eterm->{optional}=1;
  $args->pushlv($eterm);

  $args->init(

    $PEVAL_RE,
    action=>'capt',

  );

  $args->init(

    qr{,},

    action   => 'rew',
    optional => 1,

  );

  $args->init(

    $PEVAL_RE,

    action   => 'crew',
    optional => 1,

  );

  $args->pushlv($term->dup());

};

# ---   *   ---   *   ---

my $prog   = orc('plps/peso.rom');
$prog      =~ m[([\S\s]+)\s*STOP]x;
$prog      = ${^CAPTURE[0]};

my $strtok={};

for my $key(qw(

  strings
  chars
  pesc

)) {

  Shwl::cut(
    \$prog,(uc $key),Lang->Peso->{$key}

  );

  $strtok={%$strtok,%{Shwl::DUMPSTRINGS()}};

};

my $result = $top->parse($prog);

$result->sweep(qr{comment});

for my $branch(
  $result->branches_in($Shwl::CUT_RE)

) {

  $branch->{value}=$strtok->{$branch->{value}};

};

#$result->prich();

# ---   *   ---   *   ---
1; # ret

#!/usr/bin/perl
# ---   *   ---   *   ---
# OLINK
# Wraps over compiling and
# linking C files with gcc
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,

# ---   *   ---   *   ---
# deps

package main;

  use v5.36.0;
  use strict;
  use warnings;

  use Cwd qw(abs_path);
  use English qw(-no_match_vars);
  use lib $ENV{'ARPATH'}.'/lib/sys/';
  use lib $ENV{'ARPATH'}.'/lib/';

  use Style;
  use Arstd::Path;
  use Arstd::Array;
  use Arstd::WLog;
  use Arstd::PM;

  use Cli;
  use Avt::CRun;

# ---   *   ---   *   ---
# info

  our $VERSION = v1.00.3;
  our $AUTHOR  = 'IBN-3DILA';

  $WLog->mprich('AR','running olink');

# ---   *   ---   *   ---
# define arguments for commandline

my $m=Cli->nit(

  @{$Cli::Fstruct::ATTRS},

  {id=>'libs',short=>'-l',argc=>1},
  {id=>'incl',short=>'-I',argc=>1},
  {id=>'out',short=>'-o',argc=>1},

  {id=>'debug',short=>'-g',argc=>0},
  {id=>'-pg',short=>'-pg',argc=>0},

);

my @files=Cli::Fstruct::proto_search($m);

# ---   *   ---   *   ---
# sanitize input

for my $v($m->{incl},$m->{libs}) {
  $v=$NULLSTR if $v eq $NULL

};

$m->{out}=($m->{out} eq $NULL)
  ? undef
  : $m->{out}
  ;

# ---   *   ---   *   ---
# separate files by extension

my $by_ext={};

map {

  my $ext=lc extof($ARG);
  $by_ext->{$ext} //= [];

  push @{$by_ext->{$ext}},$ARG;

} @files;

# ---   *   ---   *   ---
# ^roll files together accto
# required frontend

my $fend={
  'Avt::CRun'    => [qw(c cpp)],
  'Avt::flatten' => [qw(s asm)],

};

my $by_fend={};

map {

  # ^map [files by ext]
  # ^to  [files by frontend]
  my $key=$ARG;
  my $ext=$fend->{$key};

  $by_fend->{$key}=[map {
    @{$by_ext->{$ARG}}
    if exists $by_ext->{$ARG}

  } @$ext];

  array_filter($by_fend->{$key});

} keys %$fend;

# ---   *   ---   *   ---
# ^invoke frontend

map {

  # include builder class
  my $class = $ARG;
  my $flist = $by_fend->{$class};

  cload($class);

  # ^cstruc builder ice
  my $exe = $class->new(

    name  => $m->{out},

    libs  => $m->{libs},
    incl  => $m->{incl},

    debug => $m->{debug} ne $NULL,
    files => $flist,

  );


  # ^run
  $exe->compile();
  $exe->link();


# ^skip if no files avail
} grep {
  @{$by_fend->{$ARG}}

} keys %$by_fend;

# ---   *   ---   *   ---
1; # ret

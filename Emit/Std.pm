#!/usr/bin/perl
# ---   *   ---   *   ---
# EMIT STD
# common code output tools
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lib,

# ---   *   ---   *   ---
# deps

package Emit::Std;
  use v5.42.0;
  use strict;
  use warnings;

  use English qw($ARG);

  use lib "$ENV{ARPATH}/lib/sys/";

  use Arstd::String qw(cjag);
  use Arstd::Path qw(nxbasef);
  use Arstd::Bin qw(owc);
  use Arstd::PM qw(rcaller);
  use Arstd::throw;

  use Shb7::Path;

  use lib "$ENV{ARPATH}/lib/";
  use parent 'Emit';


# ---   *   ---   *   ---
# info

  our $VERSION = 'v0.00.7';
  our $AUTHOR  = 'IBN-3DILA';


# ---   *   ---   *   ---
# generates a notice on top of generated files

sub note($author,$ch) {
  my $t=`date +%Y`;
  chomp $t;

  return cjag("\n$ch ",
    q[---   *   ---   *   ---],
    q[LIBRE BOILERPASTE],
    q[GENERATED BY AR/AVTOMAT],
    q[],
    q[LICENSED UNDER GNU GPL3],
    q[BE A BRO AND INHERIT],
    q[],
    "COPYLEFT $author $t",
    q[],
    q[---   *   ---   *   ---],
  );
};


# ---   *   ---   *   ---
# generates program info

sub version($name,$version,$author) {
  my $l1="$name $version";
  my $l2="Copyleft $author " . `date +%Y`;
  my $l3='Licensed under GNU GPL3';

  chomp $l2;

  return "$l1\n\n$l2\n$l3";
};


# ---   *   ---   *   ---
# in: path to add to PATH, names to include
# returns a perl snippet as a string to be eval'd

sub reqin($path,@name) {
  return join "\n",(
    "push \@INC,$path;",
    map {"require $ARG;"} @name,
  );
};


# ---   *   ---   *   ---
# gets $AUTHOR from package

sub get_author($pkg) {
  no strict 'refs';
  my $out=${"$pkg\::AUTHOR"};
  use strict 'refs';
  return (! defined $out)
    ? 'ANON'
    : $out
    ;
};


# ---   *   ---   *   ---
# ^$VERSION

sub get_version($pkg) {
  no strict 'refs';
  my $out=${"$pkg\::VERSION"};
  use strict 'refs';
  return (! defined $out)
    ? 'v0.00.1a'
    : $out
    ;
};


# ---   *   ---   *   ---
# wraps over emitter output F

sub outf($class,$f,%O) {
  my $path = filep($f);
  my $pkg  = rcaller($class);

  $O{author}  //= get_author($pkg);
  $O{version} //= get_version($pkg);

  owc $path,$class->codewrap(nxbasef($f),%O);

  return;
};


# ---   *   ---   *   ---
1; # ret

#!/usr/bin/perl

# AR-INSTALL
# this script sets up a new AR directory

# ---   *   ---   *   ---

BEGIN {

  my $clean=shift @ARGV;

  my $ex=$ENV{'ARPATH'}.'/avtomat/AR.ph';
  if($clean eq 'clean') {
    $ex.=q{ }.'clean';

  };

  my $me=`$ex`;

  print $me;
  if($me=~ m/^ARPATH missing/) {
    exit;

  };

};

# ---   *   ---   *   ---
# deps

  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';

  use shb7;
  use avt;

# ---   *   ---   *   ---

my $root=shb7::set_root($ENV{'ARPATH'});
avt::stlib(shb7::lib());

# ---   *   ---   *   ---
# fetch missing deps

{ my @deps=(

    ['help',$avt::LYEB.'/help',undef],
    ['ft8',$avt::LYEB.'/ft8',undef],
    ['ce',$avt::LYEB.'/ce',undef],

  );avt::depchk $root,\@deps;

};

# ---   *   ---   *   ---
# PACKAGE CONFIGS

# ---   *   ---   *   ---

avt::set_config(

  name=>'avtomat',
  pre_build=>q(

    my $ex=$ENV{'ARPATH'}.'/avtomat/AR.ph';
    my $me=`$ex`;

    print $me;
    if($me=~ m/^ARPATH missing/) {
      exit;

    };

  ),

);

# ---   *   ---   *   ---

avt::set_config(

  name=>'ce',
  scan=>'-x keys',

  build=>'x:ce',

  xcpy=>[qw(wpid)],
  xprt=>[qw(keyboard.h clock.h arstd.h)],

  gens=>{

    'chartab.h'=>[qw(chartab*)],
    'keymap.h'=>[qw(keymap* genks.pm %.k)],

  },

  libs=>[qw(X11)],

# ---   *   ---   *   ---

#  post_build=>q(
#
#    avt::stlib(avt::root().'/lib/');
#    avt::wrcplboil_pm(
#      '/lib/',
#      'lycon',
#      'IBN-3DILA',
#
#      \&avt::ctopl,['lycon',['ce']]
#
#    );avt::plext(
#
#      '/lib/lycon.pm',
#      '/ce/lycon_ext'
#
#    );
#
#  ),

);

# ---   *   ---   *   ---

#avt::set_config(
#
#  name=>'help',
#  xcpy=>[qw(help* tkmny*)],
#
#);
#
## ---   *   ---   *   ---
#
#avt::set_config(
#
#  name=>'ft8',
#
#  deps=>[
#
#    [ 'rw-psf',
#      $avt::GITHUB.'/talamus/rw-psf',
#      undef
#
#    ],
#
#  ],
#
#  xcpy=>[qw(ft8* writepsf*)],
#
## ---   *   ---   *   ---
#
#  post_build=>q(
#
#    if(!(-e avt::root."/fonts")) {
#
#      avt::ex 'ft8',[
#        '-g','8,16,24',
#
#        avt::root."/ft8/lycon",
#        avt::root."/fonts"
#
#      ],'';
#
#      avt::ex 'ft8',[
#        '-x','8,16,24','lycon',
#
#        avt::root."/fonts/",
#        avt::root."/fonts/X11"
#
#      ],'';
#
#    };
#  ),
#
#);
#
## ---   *   ---   *   ---
#
#avt::set_config(
#
#  name=>'sin',
#  build=>'ar:sin',
#
#  gens=>{
#    'shblk.h'=>[qw(shblk* %.glsl)],
#
#  },
#
#  libs=>[qw(GL GLEW ce)],
#
#);
#
## ---   *   ---   *   ---
#
#avt::set_config(
#
#  name=>'chasm',
#
#  build=>'ar:chasm',
#  libs=>[qw(sin SDL2 SDL2main)],
#
#);
#
## ---   *   ---   *   ---
#
#avt::set_config(
#
#  name=>'AUVILIB',
#
#  build=>'ar:AUVILIB',
#  xprt=>[qw(xforms/im.c)],
#
## ---   *   ---   *   ---
#
#  post_build=>q(
#
#    avt::stlib(avt::root().'/lib/');
#    avt::wrcpyboil(
#      '/lib/',
#      'AUVILIB',
#      'IBN-3DILA',
#
#      \&avt::ctopy,['AUVILIB',['AUVILIB']]
#
#    );
#
#  ),
#
#);

# ---   *   ---   *   ---
# install packages

avt::scan();
avt::config();
avt::make();

my @modules=avt::MODULES;
for my $mod(@modules) {
  print `$root/$mod/avto`

};

# ---   *   ---   *   ---
1; # ret

#!/usr/bin/perl
# ---   *   ---   *   ---
# SYGEN
# Creates syntax files from
# available definitions
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,
# ---   *   ---   *   ---

# deps
  use strict;
  use warnings;

# ---   *   ---   *   ---
# patch out our own dependencies
# because we can

  BEGIN {

    my $path=$ENV{'ARPATH'}.'/avtomat';
    my $do_cp=0;

    # first make copy
    $do_cp=!(-e "$ENV{'ARPATH'}/lib/lang.pm");
    $do_cp=(!$do_cp)
      ? !((-M "$ENV{'ARPATH'}/lib/lang.pm")
        < (-M $path."/lang.pm"))

      : $do_cp
      ;

# ---   *   ---   *   ---

    # check secondary deps to lib
    my @files=split m/\s+/,
      `ls $ENV{'ARPATH'}'/avtomat/langdefs'`;

    if(!$do_cp) {

      my $lfold=$ENV{'ARPATH'}.'/avtomat/langdefs';

      for my $f(@files) {

        if(

          !((-M "$ENV{'ARPATH'}/lib/lang.pm")
          < (-M $lfold."/$f"))

        ) {$do_cp=1;last;};

      };

    };

# ---   *   ---   *   ---

    if($do_cp) {
      `cp $path/lang.pm $ENV{'ARPATH'}/lib/`;

    };

# ---   *   ---   *   ---

    # on update, perform patch
    if($do_cp) {

      open MONKEY,'>>',
        $ENV{'ARPATH'}.'/lib/lang.pm'

      or die $!;

      # iter through addons and append
      for my $lang(@files) {
        my $s=`cat $path/langdefs/$lang`;
        $s=~ s/.*\$:CUT;>//sg;

        print MONKEY $s;

      };

      print MONKEY "\n1; #ret\n";
      close MONKEY;

    };
  };

# ---   *   ---   *   ---

  # now import like nothing happened
  use lib $ENV{'ARPATH'}.'/lib/';
  use avt;
  use lang;

# ---   *   ---   *   ---

my @colors=(

  'black','red','green','yellow',
  'blue','magenta','cyan','white',

  'grey','red','green','yellow',
  'blue','magenta','cyan','white',

);for(my $i=9;$i<16;$i++) {
  $colors[$i]='bright'.$colors[$i];

};

# ---   *   ---   *   ---

my $FH=undef;

sub prprops {

  my $l=shift;
  my $key=shift;

  my @ar=@{ lang::PROP($l,$key) };
  for(my $i=0;$i<@ar;$i++) {

    my ($color,$pat)=@{ $ar[$i] };

    my ($fg,$bg)=($color&0xF,$color>>4);

    $color=$colors[$fg].','.$colors[$bg];

    $pat=avt::dqwrap($pat);

    print $FH "color $color $pat\n";

  };

};

# ---   *   ---   *   ---

sub glang {

  while(@_) {
    my $src=shift;
    my $dst=shift;

    open $FH,'>',$dst or die $!;

    my $prop=((

      lang::PROP($src,-NAME) ).' "'.(
      lang::PROP($src,-EXT ) ).'"'

    );print $FH "syntax $prop\n";

    $prop=avt::dqwrap(lang::PROP($src,-HED));
    print $FH "header $prop\n";

    $prop=avt::dqwrap(lang::PROP($src,-MAG));
    print $FH "magic $prop\n";

    $prop=avt::dqwrap(lang::PROP($src,-COM));
    print $FH "comment $prop\n\n";

    # ---   *   ---   *   ---

    for my $key(
      -HIER,-PFUN,-DELM0,-GBL,-DELM1

    ) {prprops(-GPRE,$key);};

    for my $key(
      -BILTN,-KEYS,-VARS

    ) {prprops($src,$key);};

    for my $key(
      -NUMS,-DELM1,-OPS,-DELM2,

    ) {prprops(-GPRE,$key);};

    prprops($src,-LCOM);
    prprops(-GPRE,-DEV);

    close $FH;

  };

};glang(
  -CEE,glob('~/.config/nano/c.nanorc'),
  -PESO,glob('~/.config/nano/peso.nanorc'),
  -PERL,glob('~/.config/nano/perl.nanorc'),

);

# ---   *   ---   *   ---
1; # ret

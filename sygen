#!/usr/bin/perl
# ---   *   ---   *   ---
# SYGEN
# Creates syntax files from
# available definitions
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,
# ---   *   ---   *   ---

# deps
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/include/';
  require 'AR.ph';

# ---   *   ---   *   ---

my $srcpath=$ENV{'ARPATH'}.'/avtomat';
my $dstpath=$ENV{'ARPATH'}.'/lib';

my $do_cp=0;

# first make copy
$do_cp=!(-e "$dstpath/lang.pm");
$do_cp=(!$do_cp)
  ? !((-M "$dstpath/lang.pm")
    < (-M "$srcpath/lang.pm"))

  : $do_cp
  ;

# ---   *   ---   *   ---

# check secondary deps to lib
my @files=split m/\s+/,
  `ls $srcpath/langdefs`;

if(!$do_cp) {

  my $lfold="$srcpath/langdefs";

  for my $f(@files) {

    if(

      !((-M "$dstpath/lang.pm")
      < (-M "$lfold/$f"))

    ) {$do_cp=1;last;};

  };

};

# ---   *   ---   *   ---

if($do_cp) {
  `cp $srcpath/lang.pm $dstpath/`;

};if(!(-e "$dstpath/langdefs")) {
  `mkdir -p $dstpath/langdefs`;

};

# ---   *   ---   *   ---

# on update, perform patch
if($do_cp) {

  # iter through addons and copy if need
  for my $lang(@files) {

    my $src="$srcpath/langdefs/$lang";
    my $dst="$dstpath/langdefs/$lang";

    my $up=!(-e $dst);
    $up=(!$up)

      ? !((-M $dst)
        < (-M $src))

      : $up
      ;

    if($up) {
      `cp $src $dst`;

    };
  };
};

# ---   *   ---   *   ---

for my $lang(@files) {
  $lang=~ s/\.pm//;

};

# ---   *   ---   *   ---

sub make_script {

my $script=<<'EOF'
#!/usr/bin/perl

  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';

  use avt;
  use lang;

EOF
;

# ---   *   ---   *   ---

  for my $lang(@files) {
    $script.="  use langdefs::$lang;\n";

  };

# ---   *   ---   *   ---

$script.=<<'EOF'

my @colors=(

  'black','red','green','yellow',
  'blue','magenta','cyan','white',

  'grey','red','green','yellow',
  'blue','magenta','cyan','white',

);for(my $i=9;$i<16;$i++) {
  $colors[$i]='bright'.$colors[$i];

};my $FH=undef;

sub prprops {

  my $l=shift;
  my $key=shift;

  my @ar=@{ lang::PROP($l,$key) };
  for(my $i=0;$i<@ar;$i++) {

    my ($color,$pat)=@{ $ar[$i] };

    my ($fg,$bg)=($color&0xF,$color>>4);

    $color=$colors[$fg].','.$colors[$bg];

    $pat=avt::dqwrap($pat);

    print $FH "color $color $pat\n";

  };

};

# ---   *   ---   *   ---

sub glang {

  while(@_) {
    my $src=shift;
    my $dst=shift;

    open $FH,'>',$dst or die $!;

    my $prop=''.(

      ( lang::PROP($src,-NAME) ).' "'.
      ( lang::PROP($src,-EXT ) ).'"'

    ).'';print $FH "syntax $prop\n";

    $prop=avt::dqwrap(lang::PROP($src,-HED));
    print $FH "header $prop\n";

    $prop=avt::dqwrap(lang::PROP($src,-MAG));
    print $FH "magic $prop\n";

    $prop=avt::dqwrap(lang::PROP($src,-COM));
    print $FH "comment $prop\n\n";

# ---   *   ---   *   ---

    for my $key(
      -HIER,-PFUN,-DELM0,-GBL,-DELM1

    ) {prprops(-GPRE,$key);};

    for my $key(
      -BILTN,-KEYS,-VARS

    ) {prprops($src,$key);};

    for my $key(
      -NUMS,-DELM1,-OPS,-DELM2,

    ) {prprops(-GPRE,$key);};

    prprops($src,-LCOM);
    prprops(-GPRE,-DEV);

    close $FH;

  };
};

# ---   *   ---   *   ---

EOF
;

# ---   *   ---   *   ---

$script.="\n  glang(\n";

for my $lang(@files) {

  $script.=
    "    langdefs::$lang\::SYGEN_KEY,\n".
    "    glob(".'"'."~/.config/nano/".'".'.
    "langdefs::$lang\::RC_KEY".'.".nanorc"),'."\n";

};$script.="\n);\n";

# ---   *   ---   *   ---

  my $ex=$ENV{'ARPATH'}.'/avtomat/ex_sygen';
  open FH,'>',$ex or die $!;


  printf FH $script;
  close FH;

  `chmod +x $ex`;`$ex`;

};make_script(@files);

# ---   *   ---   *   ---
1; # ret
